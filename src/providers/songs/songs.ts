import { HttpClient} from '@angular/common/http';
import { Injectable } from '@angular/core';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/catch';
import { ToastController } from 'ionic-angular';

@Injectable()
export class SongsService {

  token: String;

  constructor(public http: HttpClient, private toastCtrl: ToastController) {
    console.log('Hello SongsProvider Provider');
    this.getToken();
  }

  getSongs(){
    return this.http.get("http://10.16.0.110:8080/v1/songs")
    .map(response => response)
    .catch(error => error);
  }

  getSongsSpotifyTitArt(tittle: String, artist: String){
    return this.http.get("https://api.spotify.com/v1/search?q=track:" + tittle + " artist:" + artist + "&type=track", {
      headers: {"Authorization": '[{"key":"Authorization","type":"text","name":"Authorization","value":"Bearer ' + this.token + '","system":true,"message":"This temporary header is generated by Postman and is not saved with your request.","enabled":true,"disableEdit":true}]'}
    })
    .map(response => response)
    .catch(error => error);
  }

  getSongsSpotifyArt(artist: String){
    return this.http.get("https://api.spotify.com/v1/search?q=artist:" + artist + "&type=track", {
      headers: {"Authorization": '[{"key":"Authorization","type":"text","name":"Authorization","value":"Bearer ' + this.token + '","system":true,"message":"This temporary header is generated by Postman and is not saved with your request.","enabled":true,"disableEdit":true}]'}
    })
    .map(response => response)
    .catch(error => error);
  }

  getSongsSpotifyTit(title: String){
    return this.http.get("https://api.spotify.com/v1/search?q=track:" + title + "&type=track", {
      headers: {"Authorization": '[{"key":"Authorization","type":"text","name":"Authorization","value":"Bearer ' + this.token + '","system":true,"message":"This temporary header is generated by Postman and is not saved with your request.","enabled":true,"disableEdit":true}]'}
    })
    .map(response => response)
    .catch(error => error);
  }

  addSong(title: String, artist: String, preview_url: String, image_small: String, image_medium: String, image_large: String, open_url: String)
  {
    let data = JSON.stringify({
      title: title,
      artist: artist,
      preview_url: preview_url,
      image_small: image_small,
      image_medium: image_medium,
      image_large: image_large,
      open_url: open_url
    });

    return new Promise((resolve, reject) => {
      this.http.post('http://10.16.0.110:8080/v1/songs', data,
      {
        headers: { 'Content-Type': 'application/json' }
      }).toPromise()
      .then((response) =>
      {
        console.log("API Response: ", response);
        resolve(response);
      })
      .catch(error => error)
    })
  }

  getToken(){
    let data = "grant_type=refresh_token&client_id=9e06f11e555740b4a8a9275db5b65415&client_secret=6c09cd4fe6554bc4a8f20c42a11e8c4a&refresh_token=AQB1IezCjAqqWLf_u9suYfLVvUTazhgb_ha7kRIj_i266i4Kuy1KjiS3Nd_FQ1f-pg4LQpqP0i8D_ngnkjgGpYJpRIS1inVGS78ELfldPey-8IakNleNEZyxxLIgSYYLqzo";

    return new Promise((resolve, reject) => {
      this.http.post('https://accounts.spotify.com/api/token', data,
      {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
      }).toPromise()
      .then((response) =>
      {
        this.token = (<any>response).access_token;
      })
      .catch(error => error)
    })
  }

  deleteSong(id: String){
    this.http.delete('http://10.16.0.110:8080/v1/songs/' + id,
    {responseType: 'text'}
    )
    .subscribe(
      response => console.log(response),
      error => console.error(error)
    );
  }
}